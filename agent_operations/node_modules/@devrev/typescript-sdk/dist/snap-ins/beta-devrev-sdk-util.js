"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BetaSdkUtil = void 0;
const axios_1 = __importStar(require("axios"));
const form_data_1 = __importDefault(require("form-data"));
const stream_1 = require("stream");
const util_1 = require("./constants/util");
const error_1 = require("./error");
class BetaSdkUtil {
    constructor(devrevSdk) {
        this.devrevSdk = devrevSdk;
    }
    getAllRevUsersFromAccount(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const revUserListPayload = {
                    associations: [accountId],
                };
                const revUsers = [];
                do {
                    const revUserListResponse = yield this.devrevSdk.revUsersList(revUserListPayload);
                    if (!revUserListResponse.data.rev_users || revUserListResponse.data.rev_users.length === 0)
                        break;
                    revUsers.push(...revUserListResponse.data.rev_users);
                    revUserListPayload.cursor = revUserListResponse.data.next_cursor;
                } while (revUserListPayload.cursor);
                return revUsers;
            }
            catch (error) {
                (0, error_1.handleApiError)(error);
            }
        });
    }
    getFileContentFromArtifact(artifactId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.devrevSdk.artifactsLocate({
                    id: artifactId,
                });
                const artifactData = response.data.url;
                const fileContentResponse = yield axios_1.default.get(artifactData);
                return fileContentResponse.data;
            }
            catch (error) {
                (0, error_1.handleApiError)(error);
            }
        });
    }
    uploadFileToArtifact(fileObject) {
        return __awaiter(this, void 0, void 0, function* () {
            const stream = new stream_1.Readable();
            try {
                if (fileObject.file_type === util_1.MIMETypes.OTHERS && !fileObject.custom_file_type) {
                    throw new axios_1.AxiosError('Custom file type is required for OTHERS file type');
                }
                const fileType = fileObject.file_type === util_1.MIMETypes.OTHERS && fileObject.custom_file_type
                    ? fileObject.custom_file_type
                    : fileObject.file_type;
                const response = yield this.devrevSdk.artifactsPrepare({
                    file_name: fileObject.file_name,
                    file_type: fileType,
                });
                const { url, form_data: formData, id } = response.data;
                const form = new form_data_1.default();
                for (const data of formData) {
                    form.append(data.key, data.value);
                }
                stream.push(fileObject.file);
                stream.push(null);
                form.append('file', stream, {
                    filename: url,
                    knownLength: stream.readableLength,
                });
                yield axios_1.default.post(url, form, undefined);
                return id;
            }
            catch (error) {
                (0, error_1.handleApiError)(error);
            }
            finally {
                stream.destroy();
            }
        });
    }
}
exports.BetaSdkUtil = BetaSdkUtil;
