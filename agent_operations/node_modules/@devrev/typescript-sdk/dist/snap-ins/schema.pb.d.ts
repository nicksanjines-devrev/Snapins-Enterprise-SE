import * as _m0 from 'protobufjs/minimal';
export declare const protobufPackage = "devrev.operation";
export interface Error {
    message: string;
    type: Error_Type;
}
export declare enum Error_Type {
    Unknown = 0,
    /** InvalidRequest - Invalid request. */
    InvalidRequest = 1,
    /** RetryExecution - Client should retry operation execution. */
    RetryExecution = 2,
    UNRECOGNIZED = -1
}
export declare function error_TypeFromJSON(object: any): Error_Type;
export declare function error_TypeToJSON(object: Error_Type): string;
export interface OperationMetadata {
    namespace: string;
    slug: string;
    type: OperationMetadata_Type;
}
export declare enum OperationMetadata_Type {
    Unknown = 0,
    Action = 1,
    UNRECOGNIZED = -1
}
export declare function operationMetadata_TypeFromJSON(object: any): OperationMetadata_Type;
export declare function operationMetadata_TypeToJSON(object: OperationMetadata_Type): string;
export interface ExecuteOperationInput {
    /** Operation metadata. */
    metadata: OperationMetadata | undefined;
    /** Input port name. If not specified then we'll use 'default' input port. */
    input_port_name: string;
    /** Input payload. */
    data: any | undefined;
}
export interface ExecuteOperationResult {
    /** Serialization format used. */
    serialization_format: ExecuteOperationResult_SerializationFormat;
    /** Serialized data (base64 encoded). */
    data: string;
}
export declare enum ExecuteOperationResult_SerializationFormat {
    Unknown = 0,
    Proto = 1,
    UNRECOGNIZED = -1
}
export declare function executeOperationResult_SerializationFormatFromJSON(object: any): ExecuteOperationResult_SerializationFormat;
export declare function executeOperationResult_SerializationFormatToJSON(object: ExecuteOperationResult_SerializationFormat): string;
export interface OutputValue {
    /**
     * List of values to send to an output port. Each value is a JSON with keys as field names.
     * Null values are dropped.
     */
    values: {
        [key: string]: any;
    }[];
}
export interface PortOutput {
    /** Name of the port. */
    port_name: string;
    /** Output value. */
    output: OutputValue | undefined;
}
export interface OperationOutput {
    error: Error | undefined;
    /**
     * NOTE: Only one of `output` and `port_outputs` should be set.
     *
     * This sends output to 'default' output port.
     * Most of the operation developers are concerned with sending output
     * on the default port and can thus use this. For more advanced usage
     * use `port_outputs` below.
     */
    output: OutputValue | undefined;
    /** This sends output to specific output ports. There should only be 1 item corresponding to a port_name. */
    port_outputs: PortOutput[];
}
export declare const Error: {
    encode(message: Error, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Error;
    fromJSON(object: any): Error;
    toJSON(message: Error): unknown;
    create<I extends {
        message?: string | undefined;
        type?: Error_Type | undefined;
    } & {
        message?: string | undefined;
        type?: Error_Type | undefined;
    } & { [K in Exclude<keyof I, keyof Error>]: never; }>(base?: I | undefined): Error;
    fromPartial<I_1 extends {
        message?: string | undefined;
        type?: Error_Type | undefined;
    } & {
        message?: string | undefined;
        type?: Error_Type | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof Error>]: never; }>(object: I_1): Error;
};
export declare const OperationMetadata: {
    encode(message: OperationMetadata, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OperationMetadata;
    fromJSON(object: any): OperationMetadata;
    toJSON(message: OperationMetadata): unknown;
    create<I extends {
        namespace?: string | undefined;
        slug?: string | undefined;
        type?: OperationMetadata_Type | undefined;
    } & {
        namespace?: string | undefined;
        slug?: string | undefined;
        type?: OperationMetadata_Type | undefined;
    } & { [K in Exclude<keyof I, keyof OperationMetadata>]: never; }>(base?: I | undefined): OperationMetadata;
    fromPartial<I_1 extends {
        namespace?: string | undefined;
        slug?: string | undefined;
        type?: OperationMetadata_Type | undefined;
    } & {
        namespace?: string | undefined;
        slug?: string | undefined;
        type?: OperationMetadata_Type | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof OperationMetadata>]: never; }>(object: I_1): OperationMetadata;
};
export declare const ExecuteOperationInput: {
    encode(message: ExecuteOperationInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteOperationInput;
    fromJSON(object: any): ExecuteOperationInput;
    toJSON(message: ExecuteOperationInput): unknown;
    create<I extends {
        metadata?: {
            namespace?: string | undefined;
            slug?: string | undefined;
            type?: OperationMetadata_Type | undefined;
        } | undefined;
        input_port_name?: string | undefined;
        data?: any | undefined;
    } & {
        metadata?: ({
            namespace?: string | undefined;
            slug?: string | undefined;
            type?: OperationMetadata_Type | undefined;
        } & {
            namespace?: string | undefined;
            slug?: string | undefined;
            type?: OperationMetadata_Type | undefined;
        } & { [K in Exclude<keyof I["metadata"], keyof OperationMetadata>]: never; }) | undefined;
        input_port_name?: string | undefined;
        data?: any | undefined;
    } & { [K_1 in Exclude<keyof I, keyof ExecuteOperationInput>]: never; }>(base?: I | undefined): ExecuteOperationInput;
    fromPartial<I_1 extends {
        metadata?: {
            namespace?: string | undefined;
            slug?: string | undefined;
            type?: OperationMetadata_Type | undefined;
        } | undefined;
        input_port_name?: string | undefined;
        data?: any | undefined;
    } & {
        metadata?: ({
            namespace?: string | undefined;
            slug?: string | undefined;
            type?: OperationMetadata_Type | undefined;
        } & {
            namespace?: string | undefined;
            slug?: string | undefined;
            type?: OperationMetadata_Type | undefined;
        } & { [K_2 in Exclude<keyof I_1["metadata"], keyof OperationMetadata>]: never; }) | undefined;
        input_port_name?: string | undefined;
        data?: any | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof ExecuteOperationInput>]: never; }>(object: I_1): ExecuteOperationInput;
};
export declare const ExecuteOperationResult: {
    encode(message: ExecuteOperationResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteOperationResult;
    fromJSON(object: any): ExecuteOperationResult;
    toJSON(message: ExecuteOperationResult): unknown;
    create<I extends {
        serialization_format?: ExecuteOperationResult_SerializationFormat | undefined;
        data?: string | undefined;
    } & {
        serialization_format?: ExecuteOperationResult_SerializationFormat | undefined;
        data?: string | undefined;
    } & { [K in Exclude<keyof I, keyof ExecuteOperationResult>]: never; }>(base?: I | undefined): ExecuteOperationResult;
    fromPartial<I_1 extends {
        serialization_format?: ExecuteOperationResult_SerializationFormat | undefined;
        data?: string | undefined;
    } & {
        serialization_format?: ExecuteOperationResult_SerializationFormat | undefined;
        data?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof ExecuteOperationResult>]: never; }>(object: I_1): ExecuteOperationResult;
};
export declare const OutputValue: {
    encode(message: OutputValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OutputValue;
    fromJSON(object: any): OutputValue;
    toJSON(message: OutputValue): unknown;
    create<I extends {
        values?: {
            [x: string]: any;
        }[] | undefined;
    } & {
        values?: ({
            [x: string]: any;
        }[] & ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K in Exclude<keyof I["values"][number], string | number>]: never; })[] & { [K_1 in Exclude<keyof I["values"], keyof {
            [x: string]: any;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "values">]: never; }>(base?: I | undefined): OutputValue;
    fromPartial<I_1 extends {
        values?: {
            [x: string]: any;
        }[] | undefined;
    } & {
        values?: ({
            [x: string]: any;
        }[] & ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K_3 in Exclude<keyof I_1["values"][number], string | number>]: never; })[] & { [K_4 in Exclude<keyof I_1["values"], keyof {
            [x: string]: any;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "values">]: never; }>(object: I_1): OutputValue;
};
export declare const PortOutput: {
    encode(message: PortOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PortOutput;
    fromJSON(object: any): PortOutput;
    toJSON(message: PortOutput): unknown;
    create<I extends {
        port_name?: string | undefined;
        output?: {
            values?: {
                [x: string]: any;
            }[] | undefined;
        } | undefined;
    } & {
        port_name?: string | undefined;
        output?: ({
            values?: {
                [x: string]: any;
            }[] | undefined;
        } & {
            values?: ({
                [x: string]: any;
            }[] & ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K in Exclude<keyof I["output"]["values"][number], string | number>]: never; })[] & { [K_1 in Exclude<keyof I["output"]["values"], keyof {
                [x: string]: any;
            }[]>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["output"], "values">]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, keyof PortOutput>]: never; }>(base?: I | undefined): PortOutput;
    fromPartial<I_1 extends {
        port_name?: string | undefined;
        output?: {
            values?: {
                [x: string]: any;
            }[] | undefined;
        } | undefined;
    } & {
        port_name?: string | undefined;
        output?: ({
            values?: {
                [x: string]: any;
            }[] | undefined;
        } & {
            values?: ({
                [x: string]: any;
            }[] & ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K_4 in Exclude<keyof I_1["output"]["values"][number], string | number>]: never; })[] & { [K_5 in Exclude<keyof I_1["output"]["values"], keyof {
                [x: string]: any;
            }[]>]: never; }) | undefined;
        } & { [K_6 in Exclude<keyof I_1["output"], "values">]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, keyof PortOutput>]: never; }>(object: I_1): PortOutput;
};
export declare const OperationOutput: {
    encode(message: OperationOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OperationOutput;
    fromJSON(object: any): OperationOutput;
    toJSON(message: OperationOutput): unknown;
    create<I extends {
        error?: {
            message?: string | undefined;
            type?: Error_Type | undefined;
        } | undefined;
        output?: {
            values?: {
                [x: string]: any;
            }[] | undefined;
        } | undefined;
        port_outputs?: {
            port_name?: string | undefined;
            output?: {
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        error?: ({
            message?: string | undefined;
            type?: Error_Type | undefined;
        } & {
            message?: string | undefined;
            type?: Error_Type | undefined;
        } & { [K in Exclude<keyof I["error"], keyof Error>]: never; }) | undefined;
        output?: ({
            values?: {
                [x: string]: any;
            }[] | undefined;
        } & {
            values?: ({
                [x: string]: any;
            }[] & ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K_1 in Exclude<keyof I["output"]["values"][number], string | number>]: never; })[] & { [K_2 in Exclude<keyof I["output"]["values"], keyof {
                [x: string]: any;
            }[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["output"], "values">]: never; }) | undefined;
        port_outputs?: ({
            port_name?: string | undefined;
            output?: {
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } | undefined;
        }[] & ({
            port_name?: string | undefined;
            output?: {
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } | undefined;
        } & {
            port_name?: string | undefined;
            output?: ({
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } & {
                values?: ({
                    [x: string]: any;
                }[] & ({
                    [x: string]: any;
                } & {
                    [x: string]: any;
                } & { [K_4 in Exclude<keyof I["port_outputs"][number]["output"]["values"][number], string | number>]: never; })[] & { [K_5 in Exclude<keyof I["port_outputs"][number]["output"]["values"], keyof {
                    [x: string]: any;
                }[]>]: never; }) | undefined;
            } & { [K_6 in Exclude<keyof I["port_outputs"][number]["output"], "values">]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I["port_outputs"][number], keyof PortOutput>]: never; })[] & { [K_8 in Exclude<keyof I["port_outputs"], keyof {
            port_name?: string | undefined;
            output?: {
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I, keyof OperationOutput>]: never; }>(base?: I | undefined): OperationOutput;
    fromPartial<I_1 extends {
        error?: {
            message?: string | undefined;
            type?: Error_Type | undefined;
        } | undefined;
        output?: {
            values?: {
                [x: string]: any;
            }[] | undefined;
        } | undefined;
        port_outputs?: {
            port_name?: string | undefined;
            output?: {
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        error?: ({
            message?: string | undefined;
            type?: Error_Type | undefined;
        } & {
            message?: string | undefined;
            type?: Error_Type | undefined;
        } & { [K_10 in Exclude<keyof I_1["error"], keyof Error>]: never; }) | undefined;
        output?: ({
            values?: {
                [x: string]: any;
            }[] | undefined;
        } & {
            values?: ({
                [x: string]: any;
            }[] & ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K_11 in Exclude<keyof I_1["output"]["values"][number], string | number>]: never; })[] & { [K_12 in Exclude<keyof I_1["output"]["values"], keyof {
                [x: string]: any;
            }[]>]: never; }) | undefined;
        } & { [K_13 in Exclude<keyof I_1["output"], "values">]: never; }) | undefined;
        port_outputs?: ({
            port_name?: string | undefined;
            output?: {
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } | undefined;
        }[] & ({
            port_name?: string | undefined;
            output?: {
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } | undefined;
        } & {
            port_name?: string | undefined;
            output?: ({
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } & {
                values?: ({
                    [x: string]: any;
                }[] & ({
                    [x: string]: any;
                } & {
                    [x: string]: any;
                } & { [K_14 in Exclude<keyof I_1["port_outputs"][number]["output"]["values"][number], string | number>]: never; })[] & { [K_15 in Exclude<keyof I_1["port_outputs"][number]["output"]["values"], keyof {
                    [x: string]: any;
                }[]>]: never; }) | undefined;
            } & { [K_16 in Exclude<keyof I_1["port_outputs"][number]["output"], "values">]: never; }) | undefined;
        } & { [K_17 in Exclude<keyof I_1["port_outputs"][number], keyof PortOutput>]: never; })[] & { [K_18 in Exclude<keyof I_1["port_outputs"], keyof {
            port_name?: string | undefined;
            output?: {
                values?: {
                    [x: string]: any;
                }[] | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_19 in Exclude<keyof I_1, keyof OperationOutput>]: never; }>(object: I_1): OperationOutput;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
