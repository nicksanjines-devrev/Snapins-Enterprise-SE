"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v4.25.2
// source: schema.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationOutput = exports.PortOutput = exports.OutputValue = exports.ExecuteOperationResult = exports.ExecuteOperationInput = exports.OperationMetadata = exports.Error = exports.executeOperationResult_SerializationFormatToJSON = exports.executeOperationResult_SerializationFormatFromJSON = exports.ExecuteOperationResult_SerializationFormat = exports.operationMetadata_TypeToJSON = exports.operationMetadata_TypeFromJSON = exports.OperationMetadata_Type = exports.error_TypeToJSON = exports.error_TypeFromJSON = exports.Error_Type = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const struct_pb_1 = require("./struct.pb");
exports.protobufPackage = 'devrev.operation';
var Error_Type;
(function (Error_Type) {
    Error_Type[Error_Type["Unknown"] = 0] = "Unknown";
    /** InvalidRequest - Invalid request. */
    Error_Type[Error_Type["InvalidRequest"] = 1] = "InvalidRequest";
    /** RetryExecution - Client should retry operation execution. */
    Error_Type[Error_Type["RetryExecution"] = 2] = "RetryExecution";
    Error_Type[Error_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Error_Type = exports.Error_Type || (exports.Error_Type = {}));
function error_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case 'Unknown':
            return Error_Type.Unknown;
        case 1:
        case 'InvalidRequest':
            return Error_Type.InvalidRequest;
        case 2:
        case 'RetryExecution':
            return Error_Type.RetryExecution;
        case -1:
        case 'UNRECOGNIZED':
        default:
            return Error_Type.UNRECOGNIZED;
    }
}
exports.error_TypeFromJSON = error_TypeFromJSON;
function error_TypeToJSON(object) {
    switch (object) {
        case Error_Type.Unknown:
            return 'Unknown';
        case Error_Type.InvalidRequest:
            return 'InvalidRequest';
        case Error_Type.RetryExecution:
            return 'RetryExecution';
        case Error_Type.UNRECOGNIZED:
        default:
            return 'UNRECOGNIZED';
    }
}
exports.error_TypeToJSON = error_TypeToJSON;
var OperationMetadata_Type;
(function (OperationMetadata_Type) {
    OperationMetadata_Type[OperationMetadata_Type["Unknown"] = 0] = "Unknown";
    OperationMetadata_Type[OperationMetadata_Type["Action"] = 1] = "Action";
    OperationMetadata_Type[OperationMetadata_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OperationMetadata_Type = exports.OperationMetadata_Type || (exports.OperationMetadata_Type = {}));
function operationMetadata_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case 'Unknown':
            return OperationMetadata_Type.Unknown;
        case 1:
        case 'Action':
            return OperationMetadata_Type.Action;
        case -1:
        case 'UNRECOGNIZED':
        default:
            return OperationMetadata_Type.UNRECOGNIZED;
    }
}
exports.operationMetadata_TypeFromJSON = operationMetadata_TypeFromJSON;
function operationMetadata_TypeToJSON(object) {
    switch (object) {
        case OperationMetadata_Type.Unknown:
            return 'Unknown';
        case OperationMetadata_Type.Action:
            return 'Action';
        case OperationMetadata_Type.UNRECOGNIZED:
        default:
            return 'UNRECOGNIZED';
    }
}
exports.operationMetadata_TypeToJSON = operationMetadata_TypeToJSON;
var ExecuteOperationResult_SerializationFormat;
(function (ExecuteOperationResult_SerializationFormat) {
    ExecuteOperationResult_SerializationFormat[ExecuteOperationResult_SerializationFormat["Unknown"] = 0] = "Unknown";
    ExecuteOperationResult_SerializationFormat[ExecuteOperationResult_SerializationFormat["Proto"] = 1] = "Proto";
    ExecuteOperationResult_SerializationFormat[ExecuteOperationResult_SerializationFormat["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ExecuteOperationResult_SerializationFormat = exports.ExecuteOperationResult_SerializationFormat || (exports.ExecuteOperationResult_SerializationFormat = {}));
function executeOperationResult_SerializationFormatFromJSON(object) {
    switch (object) {
        case 0:
        case 'Unknown':
            return ExecuteOperationResult_SerializationFormat.Unknown;
        case 1:
        case 'Proto':
            return ExecuteOperationResult_SerializationFormat.Proto;
        case -1:
        case 'UNRECOGNIZED':
        default:
            return ExecuteOperationResult_SerializationFormat.UNRECOGNIZED;
    }
}
exports.executeOperationResult_SerializationFormatFromJSON = executeOperationResult_SerializationFormatFromJSON;
function executeOperationResult_SerializationFormatToJSON(object) {
    switch (object) {
        case ExecuteOperationResult_SerializationFormat.Unknown:
            return 'Unknown';
        case ExecuteOperationResult_SerializationFormat.Proto:
            return 'Proto';
        case ExecuteOperationResult_SerializationFormat.UNRECOGNIZED:
        default:
            return 'UNRECOGNIZED';
    }
}
exports.executeOperationResult_SerializationFormatToJSON = executeOperationResult_SerializationFormatToJSON;
function createBaseError() {
    return { message: '', type: 0 };
}
exports.Error = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== '') {
            writer.uint32(10).string(message.message);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet(object.message) ? globalThis.String(object.message) : '',
            type: isSet(object.type) ? error_TypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== '') {
            obj.message = message.message;
        }
        if (message.type !== 0) {
            obj.type = error_TypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.Error.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseError();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : '';
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseOperationMetadata() {
    return { namespace: '', slug: '', type: 0 };
}
exports.OperationMetadata = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.namespace !== '') {
            writer.uint32(10).string(message.namespace);
        }
        if (message.slug !== '') {
            writer.uint32(18).string(message.slug);
        }
        if (message.type !== 0) {
            writer.uint32(24).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOperationMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.namespace = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            namespace: isSet(object.namespace)
                ? globalThis.String(object.namespace)
                : '',
            slug: isSet(object.slug) ? globalThis.String(object.slug) : '',
            type: isSet(object.type)
                ? operationMetadata_TypeFromJSON(object.type)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.namespace !== '') {
            obj.namespace = message.namespace;
        }
        if (message.slug !== '') {
            obj.slug = message.slug;
        }
        if (message.type !== 0) {
            obj.type = operationMetadata_TypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.OperationMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseOperationMetadata();
        message.namespace = (_a = object.namespace) !== null && _a !== void 0 ? _a : '';
        message.slug = (_b = object.slug) !== null && _b !== void 0 ? _b : '';
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseExecuteOperationInput() {
    return { metadata: undefined, input_port_name: '', data: undefined };
}
exports.ExecuteOperationInput = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metadata !== undefined) {
            exports.OperationMetadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
        }
        if (message.input_port_name !== '') {
            writer.uint32(18).string(message.input_port_name);
        }
        if (message.data !== undefined) {
            struct_pb_1.Value.encode(struct_pb_1.Value.wrap(message.data), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExecuteOperationInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = exports.OperationMetadata.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.input_port_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = struct_pb_1.Value.unwrap(struct_pb_1.Value.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: isSet(object.metadata)
                ? exports.OperationMetadata.fromJSON(object.metadata)
                : undefined,
            input_port_name: isSet(object.input_port_name)
                ? globalThis.String(object.input_port_name)
                : '',
            data: isSet(object === null || object === void 0 ? void 0 : object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = exports.OperationMetadata.toJSON(message.metadata);
        }
        if (message.input_port_name !== '') {
            obj.input_port_name = message.input_port_name;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.ExecuteOperationInput.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExecuteOperationInput();
        message.metadata =
            object.metadata !== undefined && object.metadata !== null
                ? exports.OperationMetadata.fromPartial(object.metadata)
                : undefined;
        message.input_port_name = (_a = object.input_port_name) !== null && _a !== void 0 ? _a : '';
        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseExecuteOperationResult() {
    return { serialization_format: 0, data: '' };
}
exports.ExecuteOperationResult = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.serialization_format !== 0) {
            writer.uint32(8).int32(message.serialization_format);
        }
        if (message.data !== '') {
            writer.uint32(18).string(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExecuteOperationResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.serialization_format = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            serialization_format: isSet(object.serialization_format)
                ? executeOperationResult_SerializationFormatFromJSON(object.serialization_format)
                : 0,
            data: isSet(object.data) ? globalThis.String(object.data) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.serialization_format !== 0) {
            obj.serialization_format =
                executeOperationResult_SerializationFormatToJSON(message.serialization_format);
        }
        if (message.data !== '') {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.ExecuteOperationResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExecuteOperationResult();
        message.serialization_format = (_a = object.serialization_format) !== null && _a !== void 0 ? _a : 0;
        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseOutputValue() {
    return { values: [] };
}
exports.OutputValue = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.values) {
            struct_pb_1.Struct.encode(struct_pb_1.Struct.wrap(v), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOutputValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.values.push(struct_pb_1.Struct.unwrap(struct_pb_1.Struct.decode(reader, reader.uint32())));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            values: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.values)
                ? [...object.values]
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.values) === null || _a === void 0 ? void 0 : _a.length) {
            obj.values = message.values;
        }
        return obj;
    },
    create(base) {
        return exports.OutputValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseOutputValue();
        message.values = ((_a = object.values) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBasePortOutput() {
    return { port_name: '', output: undefined };
}
exports.PortOutput = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_name !== '') {
            writer.uint32(10).string(message.port_name);
        }
        if (message.output !== undefined) {
            exports.OutputValue.encode(message.output, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePortOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.output = exports.OutputValue.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_name: isSet(object.port_name)
                ? globalThis.String(object.port_name)
                : '',
            output: isSet(object.output)
                ? exports.OutputValue.fromJSON(object.output)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_name !== '') {
            obj.port_name = message.port_name;
        }
        if (message.output !== undefined) {
            obj.output = exports.OutputValue.toJSON(message.output);
        }
        return obj;
    },
    create(base) {
        return exports.PortOutput.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePortOutput();
        message.port_name = (_a = object.port_name) !== null && _a !== void 0 ? _a : '';
        message.output =
            object.output !== undefined && object.output !== null
                ? exports.OutputValue.fromPartial(object.output)
                : undefined;
        return message;
    },
};
function createBaseOperationOutput() {
    return { error: undefined, output: undefined, port_outputs: [] };
}
exports.OperationOutput = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.error !== undefined) {
            exports.Error.encode(message.error, writer.uint32(10).fork()).ldelim();
        }
        if (message.output !== undefined) {
            exports.OutputValue.encode(message.output, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.port_outputs) {
            exports.PortOutput.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOperationOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = exports.Error.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.output = exports.OutputValue.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.port_outputs.push(exports.PortOutput.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            error: isSet(object.error) ? exports.Error.fromJSON(object.error) : undefined,
            output: isSet(object.output)
                ? exports.OutputValue.fromJSON(object.output)
                : undefined,
            port_outputs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.port_outputs)
                ? object.port_outputs.map((e) => exports.PortOutput.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.error !== undefined) {
            obj.error = exports.Error.toJSON(message.error);
        }
        if (message.output !== undefined) {
            obj.output = exports.OutputValue.toJSON(message.output);
        }
        if ((_a = message.port_outputs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.port_outputs = message.port_outputs.map((e) => exports.PortOutput.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.OperationOutput.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseOperationOutput();
        message.error =
            object.error !== undefined && object.error !== null
                ? exports.Error.fromPartial(object.error)
                : undefined;
        message.output =
            object.output !== undefined && object.output !== null
                ? exports.OutputValue.fromPartial(object.output)
                : undefined;
        message.port_outputs =
            ((_a = object.port_outputs) === null || _a === void 0 ? void 0 : _a.map((e) => exports.PortOutput.fromPartial(e))) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
