"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.worksDeleteGet = exports.worksExport = exports.worksList = exports.worksUpdatedGet = exports.worksCreateGet = exports.cleanup = exports.init = void 0;
const index_1 = require("../index");
const devrevSDK = index_1.client.setup({ endpoint: 'https://api.devrev.ai', token: process.env.DEVREV_TOKEN });
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        const userResponse = yield devrevSDK.devUsersSelf();
        globalThis.userId = userResponse.data.dev_user.id;
        const partResponse = yield devrevSDK.partsCreate({
            name: 'test part new',
            type: index_1.publicSDK.PartType.Product,
            owned_by: [globalThis.userId],
        });
        const tagResponse = yield devrevSDK.tagsCreate({
            name: 'test tag new',
        });
        globalThis.partId = partResponse.data.part.id;
        globalThis.tagId = tagResponse.data.tag.id;
        globalThis.userId = userResponse.data.dev_user.id;
    });
}
exports.init = init;
function cleanup() {
    return __awaiter(this, void 0, void 0, function* () {
        yield devrevSDK.partsDelete({ id: globalThis.partId });
        yield devrevSDK.tagsDelete({ id: globalThis.tagId });
    });
}
exports.cleanup = cleanup;
function worksCreateGet() {
    return __awaiter(this, void 0, void 0, function* () {
        let workInit = {
            owned_by: [globalThis.userId],
            title: 'typescript ticket - new',
            type: index_1.publicSDK.WorkType.Ticket,
            applies_to_part: globalThis.partId,
            body: 'new ticket, delete later',
            reported_by: [globalThis.userId],
            stage: { name: 'queued' },
            tags: [{ id: globalThis.tagId }],
        };
        const worksCreateResponse = yield devrevSDK.worksCreate(workInit);
        const worksGetResponse = yield devrevSDK.worksGet({
            id: worksCreateResponse.data.work.id,
        });
        expect(workInit.title).toBe(worksCreateResponse.data.work.title);
        expect(workInit.owned_by[0]).toBe(worksCreateResponse.data.work.owned_by[0].id);
        expect(workInit.type).toBe(worksCreateResponse.data.work.type);
        expect(workInit.body).toBe(worksCreateResponse.data.work.body);
        expect(workInit.title).toBe(worksGetResponse.data.work.title);
        expect(workInit.owned_by[0]).toBe(worksGetResponse.data.work.owned_by[0].id);
        expect(workInit.type).toBe(worksGetResponse.data.work.type);
        expect(workInit.body).toBe(worksGetResponse.data.work.body);
        return worksCreateResponse.data.work.id;
    });
}
exports.worksCreateGet = worksCreateGet;
function worksUpdatedGet(id) {
    return __awaiter(this, void 0, void 0, function* () {
        let workUpd = {
            applies_to_part: 'PROD-2',
            body: 'updated body',
            id: id,
            owned_by: { set: ['DEVU-14'] },
            reported_by: { set: ['DEVU-14'] },
            stage: { name: 'resolved' },
            tags: { set: [{ id: 'TAG-2' }] },
            target_close_date: '2024-03-03T19:10:25.427Z',
            title: 'updated title',
            type: index_1.publicSDK.WorkType.Ticket,
        };
        const worksUpdateResponse = yield devrevSDK.worksUpdate(workUpd);
        const worksGetResponse = yield devrevSDK.worksGet({ id: id });
        // expect(workUpd.title).toBe(worksUpdateResponse.data.work.title)
        // expect(workUpd.type).toBe(worksUpdateResponse.data.work.type)
        // expect(workUpd.body).toBe(worksUpdateResponse.data.work.body)
        // expect(workUpd.title).toBe(worksGetResponse.data.work.title)
        // expect(workUpd.type).toBe(worksGetResponse.data.work.type)
        // expect(workUpd.body).toBe(worksGetResponse.data.work.body)
    });
}
exports.worksUpdatedGet = worksUpdatedGet;
function worksList() {
    return __awaiter(this, void 0, void 0, function* () {
        const works1 = yield devrevSDK.worksCreate({
            owned_by: [globalThis.userId],
            title: 'typescript ticket 1',
            type: index_1.publicSDK.WorkType.Ticket,
            applies_to_part: globalThis.partId,
            body: 'new ticket, delete later',
            reported_by: [globalThis.userId],
            stage: { name: 'queued' },
            severity: index_1.publicSDK.TicketSeverity.Low,
        });
        const works2 = yield devrevSDK.worksCreate({
            owned_by: [globalThis.userId],
            title: 'typescript ticket 2',
            type: index_1.publicSDK.WorkType.Ticket,
            applies_to_part: globalThis.partId,
            body: 'new ticket, delete later',
            reported_by: [globalThis.userId],
            stage: { name: 'resolved' },
            severity: index_1.publicSDK.TicketSeverity.Low,
        });
        const works3 = yield devrevSDK.worksCreate({
            owned_by: [globalThis.userId],
            title: 'typescript ticket 3',
            type: index_1.publicSDK.WorkType.Ticket,
            applies_to_part: globalThis.partId,
            body: 'new ticket, delete later',
            reported_by: [globalThis.userId],
            stage: { name: 'queued' },
            severity: index_1.publicSDK.TicketSeverity.High,
        });
        const worksListResponse1 = yield devrevSDK.worksList({
            applies_to_part: [globalThis.partId],
            created_by: [globalThis.userId],
            'ticket.severity': [index_1.publicSDK.TicketSeverity.Low],
            limit: 5,
            'stage.name': ['resolved'],
            type: [index_1.publicSDK.WorkType.Ticket],
        });
        const worksListResponse2 = yield devrevSDK.worksList({
            applies_to_part: [globalThis.partId],
            created_by: [globalThis.userId],
            'ticket.severity': [index_1.publicSDK.TicketSeverity.Low],
            limit: 5,
            type: [index_1.publicSDK.WorkType.Ticket],
        });
        expect(worksListResponse1.data.works.length).toBe(1);
        expect([200, 201]).toContain(worksListResponse1.status);
        expect(worksListResponse2.data.works.length).toBe(2);
        expect([200, 201]).toContain(worksListResponse1.status);
        yield devrevSDK.worksDelete({ id: works1.data.work.id });
        yield devrevSDK.worksDelete({ id: works2.data.work.id });
        yield devrevSDK.worksDelete({ id: works3.data.work.id });
    });
}
exports.worksList = worksList;
function worksExport() {
    return __awaiter(this, void 0, void 0, function* () {
        const works1 = yield devrevSDK.worksCreate({
            owned_by: [globalThis.userId],
            title: 'typescript ticket 1',
            type: index_1.publicSDK.WorkType.Ticket,
            applies_to_part: globalThis.partId,
            body: 'new ticket, delete later',
            reported_by: [globalThis.userId],
            stage: { name: 'queued' },
            severity: index_1.publicSDK.TicketSeverity.Low,
        });
        const works2 = yield devrevSDK.worksCreate({
            owned_by: [globalThis.userId],
            title: 'typescript ticket 2',
            type: index_1.publicSDK.WorkType.Ticket,
            applies_to_part: globalThis.partId,
            body: 'new ticket, delete later',
            reported_by: [globalThis.userId],
            stage: { name: 'resolved' },
            severity: index_1.publicSDK.TicketSeverity.Low,
        });
        const works3 = yield devrevSDK.worksCreate({
            owned_by: [globalThis.userId],
            title: 'typescript ticket 3',
            type: index_1.publicSDK.WorkType.Ticket,
            applies_to_part: globalThis.partId,
            body: 'new ticket, delete later',
            reported_by: [globalThis.userId],
            stage: { name: 'queued' },
            severity: index_1.publicSDK.TicketSeverity.High,
        });
        const worksExportResponse = yield devrevSDK.worksExport({
            applies_to_part: [globalThis.partId],
            created_by: [globalThis.userId],
            'stage.name': ['resolved'],
            'ticket.severity': [index_1.publicSDK.TicketSeverity.Low],
            type: [index_1.publicSDK.WorkType.Ticket],
        });
        expect(worksExportResponse.data.works.length).toBe(1);
        expect(worksExportResponse.status).toBe(200);
        yield devrevSDK.worksDelete({ id: works1.data.work.id });
        yield devrevSDK.worksDelete({ id: works2.data.work.id });
        yield devrevSDK.worksDelete({ id: works3.data.work.id });
    });
}
exports.worksExport = worksExport;
function worksDeleteGet(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const worksDeleteResponse = yield devrevSDK.worksDelete({ id: id });
        expect(worksDeleteResponse.status).toBe(200);
        yield devrevSDK.worksDelete({ id: id });
    });
}
exports.worksDeleteGet = worksDeleteGet;
