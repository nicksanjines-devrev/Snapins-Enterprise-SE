"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('axios');
jest.mock('form-data');
const axios_1 = __importDefault(require("axios"));
const form_data_1 = __importDefault(require("form-data"));
const stream_1 = require("stream");
const util_1 = require("../snap-ins/constants/util");
const beta_devrev_sdk_util_1 = require("../snap-ins/beta-devrev-sdk-util");
describe('BetaSDKUtil', () => {
    let mockDevrevBetaSdk;
    let betaSDKUtil;
    beforeEach(() => {
        mockDevrevBetaSdk = {
            revUsersList: jest.fn(),
            artifactsLocate: jest.fn(),
            artifactsPrepare: jest.fn(),
        };
        betaSDKUtil = new beta_devrev_sdk_util_1.BetaSdkUtil(mockDevrevBetaSdk);
        jest.clearAllMocks();
    });
    describe('getAllRevUsersFromAccount', () => {
        it('should retrieve all rev users for a given account', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockRevUsers1 = [
                { id: '1', display_name: 'User 1' },
                { id: '2', display_name: 'User 2' },
            ];
            const mockRevUsers2 = [
                { id: '3', display_name: 'User 3' },
                { id: '4', display_name: 'User 4' },
            ];
            mockDevrevBetaSdk.revUsersList
                .mockResolvedValueOnce({
                data: {
                    rev_users: mockRevUsers1,
                    next_cursor: 'cursor1',
                },
            })
                .mockResolvedValueOnce({
                data: {
                    rev_users: mockRevUsers2,
                    next_cursor: null,
                },
            });
            const result = yield betaSDKUtil.getAllRevUsersFromAccount('accountId');
            expect(result).toEqual([...mockRevUsers1, ...mockRevUsers2]);
        }));
        it('should handle empty response from API', () => __awaiter(void 0, void 0, void 0, function* () {
            mockDevrevBetaSdk.revUsersList.mockResolvedValueOnce({
                data: {
                    rev_users: [],
                    next_cursor: null,
                },
            });
            const result = yield betaSDKUtil.getAllRevUsersFromAccount('accountId');
            expect(result).toEqual([]);
            expect(mockDevrevBetaSdk.revUsersList).toHaveBeenCalledTimes(1);
        }));
        it('should handle null response from API', () => __awaiter(void 0, void 0, void 0, function* () {
            mockDevrevBetaSdk.revUsersList.mockResolvedValueOnce({
                data: {
                    rev_users: null,
                    next_cursor: null,
                },
            });
            const result = yield betaSDKUtil.getAllRevUsersFromAccount('accountId');
            expect(result).toEqual([]);
            expect(mockDevrevBetaSdk.revUsersList).toHaveBeenCalledTimes(1);
        }));
    });
    describe('getFileContentFromArtifact', () => {
        it('should retrieve file content from an artifact', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockArtifactUrl = 'https://example.com/artifact';
            const mockFileContent = { data: 'File content' };
            mockDevrevBetaSdk.artifactsLocate.mockResolvedValue({
                data: { url: mockArtifactUrl },
            });
            axios_1.default.get.mockResolvedValue({
                data: mockFileContent,
            });
            const result = yield betaSDKUtil.getFileContentFromArtifact('artifactId');
            expect(result).toEqual(mockFileContent);
            expect(mockDevrevBetaSdk.artifactsLocate).toHaveBeenCalledWith({
                id: 'artifactId',
            });
            expect(axios_1.default.get).toHaveBeenCalledWith(mockArtifactUrl);
        }));
        it('should handle artifact location failure', () => __awaiter(void 0, void 0, void 0, function* () {
            mockDevrevBetaSdk.artifactsLocate.mockRejectedValue(new Error('Failed to locate artifact'));
            const result = yield betaSDKUtil.getFileContentFromArtifact('artifactId');
            expect(result).toBeUndefined();
            expect(mockDevrevBetaSdk.artifactsLocate).toHaveBeenCalledWith({
                id: 'artifactId',
            });
            expect(axios_1.default.get).not.toHaveBeenCalled();
        }));
    });
    describe('uploadFileToArtifact', () => {
        it('should upload file with specific file type successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockFileObject = {
                file_name: 'test.json',
                file_type: util_1.MIMETypes.JSON,
                file: Buffer.from('test content'),
            };
            const mockPrepareResponse = {
                data: {
                    url: 'https://example.com/upload',
                    form_data: [
                        { key: 'key1', value: 'value1' },
                        { key: 'key2', value: 'value2' },
                    ],
                    id: 'artifactId',
                },
            };
            mockDevrevBetaSdk.artifactsPrepare.mockResolvedValue(mockPrepareResponse);
            axios_1.default.post.mockResolvedValue({});
            const result = yield betaSDKUtil.uploadFileToArtifact(mockFileObject);
            expect(result).toBe('artifactId');
            expect(mockDevrevBetaSdk.artifactsPrepare).toHaveBeenCalledWith({
                file_name: 'test.json',
                file_type: util_1.MIMETypes.JSON,
            });
        }));
        it('should upload file with custom file type successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockFileObject = {
                file_name: 'test.custom',
                file_type: util_1.MIMETypes.OTHERS,
                custom_file_type: 'custom/type',
                file: Buffer.from('test content'),
            };
            const mockPrepareResponse = {
                data: {
                    url: 'https://example.com/upload',
                    form_data: [{ key: 'key1', value: 'value1' }],
                    id: 'artifactId',
                },
            };
            mockDevrevBetaSdk.artifactsPrepare.mockResolvedValue(mockPrepareResponse);
            axios_1.default.post.mockResolvedValue({});
            const result = yield betaSDKUtil.uploadFileToArtifact(mockFileObject);
            expect(result).toBe('artifactId');
            expect(mockDevrevBetaSdk.artifactsPrepare).toHaveBeenCalledWith({
                file_name: 'test.custom',
                file_type: 'custom/type',
            });
        }));
        it('should handle file upload failure', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockFileObject = {
                file_name: 'test.json',
                file_type: util_1.MIMETypes.JSON,
                file: Buffer.from('test content'),
            };
            mockDevrevBetaSdk.artifactsPrepare.mockResolvedValue({
                data: {
                    url: 'https://example.com/upload',
                    form_data: [{ key: 'key1', value: 'value1' }],
                    id: 'artifactId',
                },
            });
            axios_1.default.post.mockRejectedValue(new Error('Upload failed'));
            const result = yield betaSDKUtil.uploadFileToArtifact(mockFileObject);
            expect(result).toBeUndefined();
        }));
        it('should handle artifact prepare failure', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockFileObject = {
                file_name: 'test.json',
                file_type: util_1.MIMETypes.JSON,
                file: Buffer.from('test content'),
            };
            mockDevrevBetaSdk.artifactsPrepare.mockRejectedValue(new Error('Prepare failed'));
            const result = yield betaSDKUtil.uploadFileToArtifact(mockFileObject);
            expect(result).toBeUndefined();
            expect(axios_1.default.post).not.toHaveBeenCalled();
        }));
        it('should validate FormData creation and stream handling', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockFileObject = {
                file_name: 'test.json',
                file_type: util_1.MIMETypes.JSON,
                file: Buffer.from('test content'),
            };
            const mockPrepareResponse = {
                data: {
                    url: 'https://example.com/upload',
                    form_data: [{ key: 'key1', value: 'value1' }],
                    id: 'artifactId',
                },
            };
            mockDevrevBetaSdk.artifactsPrepare.mockResolvedValue(mockPrepareResponse);
            axios_1.default.post.mockResolvedValue({});
            const result = yield betaSDKUtil.uploadFileToArtifact(mockFileObject);
            expect(result).toBe('artifactId');
            // Verify FormData handling
            expect(form_data_1.default).toHaveBeenCalled();
            const formDataInstance = form_data_1.default.mock.instances[0];
            expect(formDataInstance.append).toHaveBeenCalledWith('key1', 'value1');
            expect(formDataInstance.append).toHaveBeenCalledWith('file', expect.any(stream_1.Readable), expect.any(Object));
        }));
    });
});
