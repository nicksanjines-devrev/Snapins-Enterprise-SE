"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanup = exports.timelineList = exports.timelineUpdateGet = exports.timelineCreateGet = exports.init = void 0;
const index_1 = require("../index");
const devrevSDK = index_1.client.setup({ endpoint: 'https://api.devrev.ai', token: process.env.DEVREV_TOKEN });
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const userResponse = yield devrevSDK.devUsersSelf();
            const partResponse = yield devrevSDK.partsCreate({
                name: 'test part',
                type: index_1.publicSDK.PartType.Product,
                owned_by: [userResponse.data.dev_user.id],
            });
            globalThis.partId = partResponse.data.part.id;
            globalThis.userId = userResponse.data.dev_user.id;
            const workResponse = yield devrevSDK.worksCreate({
                applies_to_part: partResponse.data.part.id,
                title: 'New work item',
                type: index_1.publicSDK.WorkType.Ticket,
                owned_by: [userResponse.data.dev_user.id],
            });
            globalThis.workId = workResponse.data.work.id;
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.init = init;
function timelineCreateGet() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const timelineCreateResponse = yield devrevSDK.timelineEntriesCreate({
                object: globalThis.workId,
                type: index_1.publicSDK.TimelineEntriesCreateRequestType.TimelineComment,
                body: 'test comment',
                body_type: index_1.publicSDK.TimelineCommentBodyType.Text,
            });
            const timelineGetResponse = yield devrevSDK.timelineEntriesGet({
                id: timelineCreateResponse.data.timeline_entry.id,
            });
            const create = timelineCreateResponse.data.timeline_entry;
            const get = timelineGetResponse.data.timeline_entry;
            expect([200, 201]).toContain(timelineCreateResponse.status);
            expect([200, 201]).toContain(timelineGetResponse.status);
            expect(create.artifacts).toBe(get.artifacts);
            expect(create.body).toBe(get.body);
            expect(create.body_type).toBe(get.body_type);
            if (create.created_by !== undefined && get.created_by !== undefined) {
                expect(create.created_by).toStrictEqual(get.created_by);
            }
            expect(create.created_date).toBe(get.created_date);
            expect(create.display_id).toBe(get.display_id);
            expect(create.snap_kit_body).toBe(get.snap_kit_body);
            expect(create.type).toBe(get.type);
            expect(create.body).toBe('test comment');
            expect(create.body_type).toBe('text');
            return create.id;
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.timelineCreateGet = timelineCreateGet;
function timelineUpdateGet(id) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const timelimeUpdateResponse = yield devrevSDK.timelineEntriesUpdate({
                id: id,
                type: index_1.publicSDK.TimelineEntriesUpdateRequestType.TimelineComment,
                body: 'test comment updated',
                body_type: index_1.publicSDK.TimelineCommentBodyType.Text,
            });
            const timelineGetResponse = yield devrevSDK.timelineEntriesGet({
                id: timelimeUpdateResponse.data.timeline_entry.id,
            });
            const updateComment = timelimeUpdateResponse.data.timeline_entry;
            const getComment = timelineGetResponse.data.timeline_entry;
            expect(timelimeUpdateResponse.status).toBe(200);
            expect(timelineGetResponse.status).toBe(200);
            expect(updateComment.body).toBe(getComment.body);
            expect(updateComment.body).toBe('test comment updated');
            expect(updateComment.artifacts).toBe(getComment.artifacts);
            expect(updateComment.body).toBe(getComment.body);
            expect(updateComment.body_type).toBe(getComment.body_type);
            if (updateComment.created_by !== undefined && getComment.created_by !== undefined) {
                expect(updateComment.created_by).toStrictEqual(getComment.created_by);
            }
            expect(updateComment.created_date).toBe(getComment.created_date);
            expect(updateComment.display_id).toBe(getComment.display_id);
            if (updateComment.modified_by !== undefined && getComment.modified_by !== undefined) {
                expect(updateComment.modified_by).toStrictEqual(getComment.modified_by);
            }
            expect(updateComment.modified_date).toBe(getComment.modified_date);
            expect(updateComment.snap_kit_body).toBe(getComment.snap_kit_body);
            expect(updateComment.type).toBe(getComment.type);
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.timelineUpdateGet = timelineUpdateGet;
function timelineList() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const comment1 = yield devrevSDK.timelineEntriesCreate({
                object: globalThis.workId,
                type: index_1.publicSDK.TimelineEntriesCreateRequestType.TimelineComment,
                body: 'test comment1',
                body_type: index_1.publicSDK.TimelineCommentBodyType.Text,
            });
            const comment2 = yield devrevSDK.timelineEntriesCreate({
                object: globalThis.workId,
                type: index_1.publicSDK.TimelineEntriesCreateRequestType.TimelineComment,
                body: 'test comment2',
                body_type: index_1.publicSDK.TimelineCommentBodyType.Text,
            });
            const timelineListResponse = yield devrevSDK.timelineEntriesList({
                object: globalThis.workId,
            });
            expect(timelineListResponse.status).toBe(200);
            expect(timelineListResponse.data.timeline_entries.length).toBe(3);
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.timelineList = timelineList;
function cleanup() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield devrevSDK.partsDelete({ id: globalThis.partId });
            yield devrevSDK.worksDelete({ id: globalThis.workId });
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.cleanup = cleanup;
