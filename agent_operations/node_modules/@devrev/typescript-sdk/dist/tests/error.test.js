"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const error_1 = require("../snap-ins/constants/error");
const error_2 = require("../snap-ins/error");
// Mock console.error to prevent actual console logs during tests
const mockConsoleError = jest.spyOn(console, 'error').mockImplementation(() => { });
describe('handleApiError', () => {
    beforeEach(() => {
        // Clear mock calls before each test
        mockConsoleError.mockClear();
    });
    afterAll(() => {
        // Restore original console.error after all tests
        mockConsoleError.mockRestore();
    });
    it('should handle valid AxiosError with complete response data', () => {
        const mockAxiosError = new axios_1.AxiosError();
        mockAxiosError.response = {
            config: {
                url: 'https://api.example.com/users',
                headers: {},
            },
            data: {
                message: 'User not found',
                type: 'NOT_FOUND',
            },
            status: 404,
            statusText: 'Not Found',
            headers: {},
        };
        mockAxiosError.stack = '\nError: Request failed\nat process ticks\nat async getUserData\nat processRequest';
        (0, error_2.handleApiError)(mockAxiosError);
        // Expected log message
        const expectedLog = [
            '\n=== Error Details ===',
            'Service: getUserData',
            'API: https://api.example.com/users',
            'Error Type: NOT_FOUND',
            'Status Code: 404',
            'Message: User not found',
        ].join('\n');
        // Verify exact match of console.error message
        expect(mockConsoleError).toHaveBeenCalledWith(expectedLog);
    });
    it('should handle AxiosError with missing response data', () => {
        const mockAxiosError = new axios_1.AxiosError();
        mockAxiosError.response = {
            config: { headers: {} },
            data: {},
            status: 500,
            statusText: 'Internal Server Error',
            headers: {},
        };
        (0, error_2.handleApiError)(mockAxiosError);
        const expectedLog = [
            '\n=== Error Details ===',
            `Service: runTestInternal`,
            `API: ${error_1.UNKNOWN_URL}`,
            `Error Type: ${error_1.UNKNOWN_TYPE}`,
            'Status Code: 500',
            `Message: ${error_1.UNKNOWN_MESSAGE}`,
        ].join('\n');
        expect(mockConsoleError).toHaveBeenCalledWith(expectedLog);
    });
    it('should handle non-AxiosError', () => {
        const regularError = new Error('Regular error');
        (0, error_2.handleApiError)(regularError);
        const expectedLog = [
            '\n=== Error Details ===',
            `Service: ${error_1.UNKNOWN_FUNCTION}`,
            `API: ${error_1.UNKNOWN_URL}`,
            `Error Type: ${error_1.UNKNOWN_TYPE}`,
            `Status Code: ${error_1.UNKNOWN_STATUS}`,
            `Message: ${error_1.UNKNOWN_MESSAGE}`,
        ].join('\n');
        expect(mockConsoleError).toHaveBeenCalledWith(expectedLog);
    });
    it('should handle undefined error', () => {
        (0, error_2.handleApiError)(undefined);
        const expectedLog = [
            '\n=== Error Details ===',
            `Service: ${error_1.UNKNOWN_FUNCTION}`,
            `API: ${error_1.UNKNOWN_URL}`,
            `Error Type: ${error_1.UNKNOWN_TYPE}`,
            `Status Code: ${error_1.UNKNOWN_STATUS}`,
            `Message: ${error_1.UNKNOWN_MESSAGE}`,
        ].join('\n');
        expect(mockConsoleError).toHaveBeenCalledWith(expectedLog);
    });
    it('should handle AxiosError with missing stack trace', () => {
        const mockAxiosError = new axios_1.AxiosError();
        mockAxiosError.response = {
            config: {
                url: 'https://api.example.com/users',
                headers: {},
            },
            data: {
                message: 'User not found',
                type: 'NOT_FOUND',
            },
            status: 404,
            statusText: 'Not Found',
            headers: {},
        };
        mockAxiosError.stack = undefined;
        (0, error_2.handleApiError)(mockAxiosError);
        const expectedLog = [
            '\n=== Error Details ===',
            `Service: ${error_1.UNKNOWN_FUNCTION}`,
            'API: https://api.example.com/users',
            'Error Type: NOT_FOUND',
            'Status Code: 404',
            'Message: User not found',
        ].join('\n');
        expect(mockConsoleError).toHaveBeenCalledWith(expectedLog);
    });
});
