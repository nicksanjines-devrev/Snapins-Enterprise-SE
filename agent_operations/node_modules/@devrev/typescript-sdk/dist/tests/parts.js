"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.partsList = exports.partsDeleteGet = exports.partsUpdateGet = exports.partsCreateGet = exports.init = void 0;
const index_1 = require("../index");
const devrevSDK = index_1.client.setup({ endpoint: 'https://api.devrev.ai', token: process.env.DEVREV_TOKEN });
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        const userResponse = yield devrevSDK.devUsersSelf();
        globalThis.userId = userResponse.data.dev_user.id;
    });
}
exports.init = init;
function partsCreateGet() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            var newPart = {
                owned_by: [globalThis.userId],
                type: index_1.publicSDK.PartType.Product,
                name: 'Typescript Part',
                description: 'new ts part',
            };
            const partsCreateResponse = yield devrevSDK.partsCreate(newPart);
            const partsGetResponse = yield devrevSDK.partsGet({ id: partsCreateResponse.data.part.id });
            expect(newPart.name).toBe(partsCreateResponse.data.part.name);
            expect(newPart.owned_by[0]).toBe(partsCreateResponse.data.part.owned_by[0].id);
            expect(newPart.type).toBe(partsCreateResponse.data.part.type);
            expect(newPart.description).toBe(partsCreateResponse.data.part.description);
            expect(newPart.name).toBe(partsGetResponse.data.part.name);
            expect(newPart.owned_by[0]).toBe(partsGetResponse.data.part.owned_by[0].id);
            expect(newPart.type).toBe(partsGetResponse.data.part.type);
            expect(newPart.description).toBe(partsGetResponse.data.part.description);
            return partsCreateResponse.data.part.id;
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.partsCreateGet = partsCreateGet;
function partsUpdateGet(id) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            var updPart = {
                owned_by: { set: ['DEVU-14'] },
                type: index_1.publicSDK.PartType.Product,
                name: 'Typescript Part UPDATED',
                description: 'updated ts part',
                id: id,
            };
            const partsUpdateResponse = yield devrevSDK.partsUpdate(updPart);
            const partsGetResponse = yield devrevSDK.partsGet({ id: partsUpdateResponse.data.part.id });
            expect(updPart.name).toBe(partsUpdateResponse.data.part.name);
            expect(updPart.type).toBe(partsUpdateResponse.data.part.type);
            expect(updPart.description).toBe(partsUpdateResponse.data.part.description);
            expect(updPart.name).toBe(partsGetResponse.data.part.name);
            expect(updPart.type).toBe(partsGetResponse.data.part.type);
            expect(updPart.description).toBe(partsGetResponse.data.part.description);
            return partsUpdateResponse.data.part.id;
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.partsUpdateGet = partsUpdateGet;
function partsDeleteGet(id) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const partsDeleteResponse = yield devrevSDK.partsDelete({ id: id });
            expect(partsDeleteResponse.status).toBe(200);
        }
        catch (error) {
            console.log(error);
        }
        yield devrevSDK.partsDelete({ id: id });
    });
}
exports.partsDeleteGet = partsDeleteGet;
function partsList() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const partsCreateResponse1 = yield devrevSDK.partsCreate({
                owned_by: ['DEVU-1'],
                type: index_1.publicSDK.PartType.Product,
                name: 'Typescript Part-Test1',
                description: 'test part 1',
            });
            const partsCreateResponse2 = yield devrevSDK.partsCreate({
                owned_by: ['DEVU-2'],
                type: index_1.publicSDK.PartType.Product,
                name: 'Typescript Part-Test2',
                description: 'test part 2',
            });
            const partsCreateResponse3 = yield devrevSDK.partsCreate({
                owned_by: ['DEVU-2'],
                type: index_1.publicSDK.PartType.Product,
                name: 'Typescript Part-Test3',
                description: 'test part 3',
            });
            const partsListResponse = yield devrevSDK.partsList({
                name: ['Typescript Part-Test1'],
                owned_by: ['DEVU-1'],
            });
            expect(partsListResponse.status).toBe(200);
            yield devrevSDK.partsDelete({ id: partsCreateResponse1.data.part.id });
            yield devrevSDK.partsDelete({ id: partsCreateResponse2.data.part.id });
            yield devrevSDK.partsDelete({ id: partsCreateResponse3.data.part.id });
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.partsList = partsList;
