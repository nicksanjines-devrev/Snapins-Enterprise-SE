"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RevUsersList = exports.revUsersDeleteGet = exports.revUsersUpdateGet = exports.revUsersCreateGet = exports.cleanup = exports.init = void 0;
const index_1 = require("../index");
const devrevBetaSDK = index_1.client.setupBeta({ endpoint: 'https://api.devrev.ai', token: process.env.DEVREV_TOKEN });
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            var newRevUser1 = {
                email: "user1@example.com",
                display_name: "TestUser1"
            };
            const revUsersCreateResponse1 = yield devrevBetaSDK.revUsersCreate(newRevUser1);
            globalThis.newRevUser1Id = revUsersCreateResponse1.data.rev_user.id;
            var newRevUser2 = {
                email: "user2@example.com",
                display_name: "TestUser2"
            };
            const revUsersCreateResponse2 = yield devrevBetaSDK.revUsersCreate(newRevUser2);
            globalThis.newRevUser2Id = revUsersCreateResponse2.data.rev_user.id;
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.init = init;
function cleanup() {
    return __awaiter(this, void 0, void 0, function* () {
        revUsersDeleteGet(globalThis.newRevUser1Id);
        revUsersDeleteGet(globalThis.newRevUser2Id);
    });
}
exports.cleanup = cleanup;
function revUsersCreateGet() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            var newRevUser = {
                email: "user@example.com",
                display_name: "TestUser"
            };
            const revUsersCreateResponse = yield devrevBetaSDK.revUsersCreate(newRevUser);
            const revUsersGetResponse = yield devrevBetaSDK.revUsersGet({ id: revUsersCreateResponse.data.rev_user.id });
            expect(newRevUser.email).toBe(revUsersCreateResponse.data.rev_user.email);
            expect(newRevUser.display_name).toBe(revUsersCreateResponse.data.rev_user.display_name);
            return revUsersGetResponse.data.rev_user.id;
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.revUsersCreateGet = revUsersCreateGet;
function revUsersUpdateGet(id) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            var upRevUser = {
                id: id,
                display_name: 'UpdatedTestUser',
            };
            const revUsersUpdateResponse = yield devrevBetaSDK.revUsersUpdate(upRevUser);
            const revUsersGetResponse = yield devrevBetaSDK.revUsersGet({ id: revUsersUpdateResponse.data.rev_user.id });
            expect(upRevUser.display_name).toBe(revUsersUpdateResponse.data.rev_user.display_name);
            return revUsersUpdateResponse.data.rev_user.id;
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.revUsersUpdateGet = revUsersUpdateGet;
function revUsersDeleteGet(id) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const revUsersDeleteResponse = yield devrevBetaSDK.revUsersDelete({ id: id });
            expect(revUsersDeleteResponse.status).toBe(200);
        }
        catch (error) {
            console.log(error);
        }
    });
}
exports.revUsersDeleteGet = revUsersDeleteGet;
function RevUsersList() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const revUsersListResponse = yield devrevBetaSDK.revUsersList({
                email: ["user1@example.com"],
            });
            expect(revUsersListResponse.status).toBe(200);
        }
        catch (error) {
            console.log(error);
            cleanup();
        }
    });
}
exports.RevUsersList = RevUsersList;
